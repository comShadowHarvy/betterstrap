#!/bin/bash

# Configuration
AUTHOR="ShadowHarvy"
GLADOS_VOICE="GLaDOS"
YADM_TARGET_REPO="https://github.com/comShadowHarvy/conf"

# --- ANSI Color Codes ---
RESET='\033[0m'
# Regular Colors
# BLACK='\033[0;30m' # Not used, often hard to see
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'
# Bright/Bold
B_RED='\033[1;31m'
B_GREEN='\033[1;32m'
B_YELLOW='\033[1;33m'
B_BLUE='\033[1;34m'
B_MAGENTA='\033[1;35m'
B_CYAN='\033[1;36m'
B_WHITE='\033[1;37m'
# Dim/Grey (might not work everywhere)
DIM_WHITE='\033[2;37m'

# --- GLaDOS-esque Functions (Now with Pointless Color!) ---

function glados_speak {
    # Use Bright Cyan for GLaDOS's main voice
    echo -e "\n${B_CYAN}${GLADOS_VOICE}:${RESET} ${B_WHITE}\"$1\"${RESET}"
    sleep 1
}

function glados_mutter {
    # Use Yellow for mutterings/asides
    echo -e "    ${YELLOW}($1)${RESET}"
    sleep 0.5
}

function title_screen {
    clear
    echo -e "${B_WHITE}############################################################${RESET}"
    echo -e "${B_WHITE}#                                                          #${RESET}"
    echo -e "${B_WHITE}#        ${B_CYAN}Aperture Science Prerequisite Setup Utility${B_WHITE}       #${RESET}"
    echo -e "${B_WHITE}#                                                          #${RESET}"
    echo -e "${B_WHITE}#               Subject: ${YELLOW}Installation Protocol${B_WHITE}             #${RESET}"
    echo -e "${B_WHITE}#                 Overseer: ${B_CYAN}GLaDOS${B_WHITE}                         #${RESET}"
    echo -e "${B_WHITE}#          Inevitably Flawed Input By: ${MAGENTA}${AUTHOR}${B_WHITE}         #${RESET}"
    echo -e "${B_WHITE}#                                                          #${RESET}"
    echo -e "${B_WHITE}############################################################${RESET}"
    glados_speak "Initiating system scan for... ${YELLOW}deficiencies${B_WHITE}. Yours, most likely."
    sleep 3
}

function fake_loading_screen {
    clear
    glados_speak "Processing your... 'request'. Adding color only ${YELLOW}highlights${B_WHITE} the underlying complexity."
    echo ""
    for i in {1..10}; do
        # Green loading bar elements
        echo -n -e "${B_WHITE}Calibrating visual stimulus... [${B_GREEN}"
        for j in $(seq 1 $i); do echo -n "#"; done
        # Reset color for the spaces
        echo -n -e "${RESET}${B_WHITE}"
        for j in $(seq $i 9); do echo -n " "; done
        echo -n -e "] $((i * 10))%${RESET}"
        echo -ne "\r"
        sleep 0.3
    done
    echo -ne "\n"
    glados_speak "Calibration complete. The results are... ${GREEN}colorful${B_WHITE}. If nothing else."
    sleep 2
    clear
}

function detect_package_manager {
    if command -v apt-get &> /dev/null; then
        echo "apt"
    elif command -v yum &> /dev/null; then
        echo "yum"
    elif command -v dnf &> /dev/null; then
        echo "dnf"
    elif command -v pacman &> /dev/null; then
        echo "pacman"
    elif command -v zypper &> /dev/null; then
        echo "zypper"
    elif command -v brew &> /dev/null; then
        echo "brew"
    else
        echo "unknown"
    fi
}

function install_package {
    local pkg_command="$1" # The command to check for (e.g., rg for ripgrep)
    local pkg_install_name="$2" # The name to use for installation (e.g., ripgrep)
    local human_name="$3"
    local PACKMAN="$4"

    glados_speak "Checking for ${YELLOW}${human_name}${B_WHITE}. Do try to keep up."
    if command -v "${pkg_command}" &> /dev/null; then
        glados_speak "${GREEN}${human_name} is already installed.${B_WHITE} A rare glimmer of foresight, perhaps?"
        return 0
    fi

    glados_mutter "Attempting to install ${human_name} (${pkg_install_name}). This should be... illustrative."

    local install_cmd
    local update_cmd="" # Only used by apt really
    local success=false

    case "$PACKMAN" in
        apt)
            update_cmd="sudo apt-get update -qq > /dev/null 2>&1"
            install_cmd="sudo apt-get install -y \"${pkg_install_name}\""
            ;;
        yum)
            install_cmd="sudo yum install -y \"${pkg_install_name}\""
            ;;
        dnf)
            install_cmd="sudo dnf install -y \"${pkg_install_name}\""
            ;;
        pacman)
            glados_mutter "Ah, Arch Linux. For those who find stability... ${YELLOW}boring${RESET}${YELLOW}."
            install_cmd="sudo pacman -Syu --noconfirm \"${pkg_install_name}\""
            ;;
        zypper)
            install_cmd="sudo zypper install -y \"${pkg_install_name}\""
            ;;
        brew)
            install_cmd="brew install \"${pkg_install_name}\""
            ;;
        *)
            glados_speak "I can't identify your package manager for ${YELLOW}${human_name}${B_WHITE}. You'll have to install it (${pkg_install_name}) yourself. I have every confidence in your... ability to find a search engine."
            # Yellow prompt
            read -p "$(echo -e "${B_YELLOW}Press [Enter] when you believe you've accomplished this monumental feat for ${human_name}...${RESET}")"
            if command -v "${pkg_command}" &> /dev/null; then success=true; else success=false; fi
            ;;
    esac

    # Execute install if package manager was found
    if [[ -n "$install_cmd" ]]; then
        # Run update command if defined (for apt)
        if [[ -n "$update_cmd" ]]; then
            eval "$update_cmd"
        fi
        # Run install command
        if eval "$install_cmd"; then
            success=true
        else
            glados_speak "${B_RED}Failed to install ${human_name}. Predictable.${RESET}"
            success=false
        fi
    fi


    # Final check and report
    if $success && command -v "${pkg_command}" &> /dev/null; then
        glados_speak "${GREEN}${human_name} installation seems... successful.${B_WHITE} Don't let it go to your head."
        return 0
    elif $success && ! command -v "${pkg_command}" &> /dev/null; then
        # Installed, but command not found? Weird.
         glados_speak "${B_YELLOW}Package manager reported success for ${human_name}, but the command '${pkg_command}' is still not found. Check your PATH. Or maybe it installed something unexpected.${RESET}"
         return 1
    else
        # Failed either via package manager or manual prompt check
        if [[ -z "$install_cmd" ]]; then # Only show this if it was the manual path
             glados_speak "${B_RED}${human_name} still appears to be missing after your manual attempt. My disappointment is immeasurable.${RESET}"
        fi
        return 1
    fi
}


function install_neovim {
    local PACKMAN="$1"
    glados_speak "Now for ${MAGENTA}Neovim${B_WHITE}. The text editor for those who find 'simplicity' too complex."
    if command -v nvim &> /dev/null; then
        NEOVIM_VERSION_FULL=$(nvim --version)
        NEOVIM_VERSION=$(echo "$NEOVIM_VERSION_FULL" | head -n 1)
        glados_speak "${GREEN}Neovim is already here.${B_WHITE} ${NEOVIM_VERSION}. Let's hope it's recent enough for your 'LazyVim'. They recommend ${YELLOW}0.9.0${B_WHITE} or newer, you know."
        # Basic version check
        MIN_MAJOR=0
        MIN_MINOR=9
        CURRENT_MAJOR=$(echo "$NEOVIM_VERSION" | sed 's/NVIM v\([0-9]*\)\.\([0-9]*\).*/\1/')
        CURRENT_MINOR=$(echo "$NEOVIM_VERSION" | sed 's/NVIM v\([0-9]*\)\.\([0-9]*\).*/\2/')
        if [[ "$CURRENT_MAJOR" -lt "$MIN_MAJOR" || ("$CURRENT_MAJOR" -eq "$MIN_MAJOR" && "$CURRENT_MINOR" -lt "$MIN_MINOR") ]]; then
            glados_speak "${B_YELLOW}Your Neovim version (${CURRENT_MAJOR}.${CURRENT_MINOR}) is rather... vintage. LazyVim might throw a tantrum. You might need to update it manually for the best, or any, results.${RESET}"
        fi
        return 0
    fi

    local install_cmd
    local success=false

    case "$PACKMAN" in
        apt)
            glados_mutter "Considering adding a PPA for a more... current version of Neovim."
            # Add Neovim PPA for latest stable if on older Ubuntu/Debian
            # sudo add-apt-repository ppa:neovim-ppa/stable -y # Requires software-properties-common
            # sudo apt-get update -qq > /dev/null 2>&1
            install_cmd="sudo apt-get install -y neovim"
            ;;
        yum | dnf)
            if [ "$PACKMAN" == "yum" ]; then
                 glados_mutter "Checking for EPEL repository, a common crutch for older systems."
                 if ! yum repolist enabled | grep -q -i "epel"; then
                    sudo yum install -y epel-release || glados_speak "${YELLOW}Failed to install EPEL. This may or may not matter.${RESET}"
                 fi
            fi
            install_cmd="sudo ${PACKMAN} install -y neovim"
            ;;
        pacman)
            install_cmd="sudo pacman -Syu --noconfirm neovim"
            ;;
        zypper)
            install_cmd="sudo zypper install -y neovim"
            ;;
        brew)
            install_cmd="brew install neovim"
            ;;
        *)
            glados_speak "You'll need to install ${MAGENTA}Neovim${B_WHITE} (${YELLOW}0.9.0+${B_WHITE} recommended) manually."
            glados_speak "Visit the official ${BLUE}Neovim GitHub releases${B_WHITE} page. Try not to download any... *additional* problems."
            read -p "$(echo -e "${B_YELLOW}Press [Enter] once you've subjected your system to Neovim...${RESET}")"
            if command -v nvim &> /dev/null; then success=true; else success=false; fi
            ;;
    esac

     # Execute install if package manager was found
    if [[ -n "$install_cmd" ]]; then
        if eval "$install_cmd"; then
            success=true
        else
            glados_speak "${B_RED}Neovim installation via ${PACKMAN} failed. Are you sure this machine is turned on?${RESET}"
            success=false
        fi
    fi

    # Final check
    if $success && command -v nvim &> /dev/null; then
        glados_speak "${GREEN}Neovim seems to be installed.${B_WHITE} One less thing for me to worry about. For now."
        return 0
    else
        glados_speak "${B_RED}Neovim is still absent. My patience, unlike your incompetence, is finite.${RESET}"
        return 1
    fi
}


function configure_yadm_for_user {
    local user_description="$1" # e.g., "current user" or "root user"
    local yadm_cmd_prefix="$2" # e.g., "" or "sudo"
    local user_home_for_yadm="$3" # e.g., "$HOME" or "/root"

    # Use Magenta for user description for emphasis
    glados_speak "Now, let's attempt to configure YADM for the ${B_MAGENTA}${user_description}${B_WHITE}. This could get... interesting."

    # Check if YADM command is available (potentially with sudo)
    if ! ${yadm_cmd_prefix} yadm --version &> /dev/null; then
        glados_speak "${B_RED}YADM does not seem to be installed or accessible for the ${B_MAGENTA}${user_description}${B_RED}. I can't configure what isn't there.${RESET}"
        return 1
    fi

    glados_mutter "Verifying YADM initialization for ${user_description}..."
    local yadm_repo_path_cmd
    if [ -n "$yadm_cmd_prefix" ]; then # For root
        yadm_repo_path_cmd="${yadm_cmd_prefix} sh -c 'HOME=${user_home_for_yadm} yadm rev-parse --git-dir 2>/dev/null'"
    else # For current user
        yadm_repo_path_cmd="yadm rev-parse --git-dir 2>/dev/null"
    fi

    # Check if YADM is initialized
    if ! eval "${yadm_repo_path_cmd}" &> /dev/null; then
        glados_speak "YADM is not yet initialized for the ${B_MAGENTA}${user_description}${B_WHITE}. Let's rectify that with ${YELLOW}'init'${B_WHITE}."
        if ! ${yadm_cmd_prefix} yadm init; then
            glados_speak "${B_RED}YADM initialization failed for ${B_MAGENTA}${user_description}${B_RED}. How... unexpected.${RESET}"
            return 1
        fi
        glados_mutter "YADM initialized. A blank slate. Much like some minds I know."
    else
        glados_speak "YADM appears to be already initialized for the ${B_MAGENTA}${user_description}${B_WHITE}. ${GREEN}Commendable${B_WHITE}. Or simply evidence of prior meddling."
    fi

    glados_speak "Now, let's point it to your chosen repository: ${BLUE}${YADM_TARGET_REPO}${B_WHITE}."
    local current_remote_url
    current_remote_url=$(${yadm_cmd_prefix} yadm remote get-url origin 2>/dev/null)

    if [[ "$current_remote_url" == "$YADM_TARGET_REPO" ]]; then
        glados_speak "The ${YELLOW}'origin'${B_WHITE} remote is already correctly set for the ${B_MAGENTA}${user_description}${B_WHITE}. ${GREEN}Miraculous${B_WHITE}."
    elif [ -n "$current_remote_url" ]; then
        glados_speak "The ${YELLOW}'origin'${B_WHITE} remote points to '${YELLOW}${current_remote_url}${B_WHITE}'. I'll ${RED}change${B_WHITE} that for you. You're welcome."
        if ! ${yadm_cmd_prefix} yadm remote set-url origin "${YADM_TARGET_REPO}"; then
            glados_speak "${B_RED}Failed to update the remote URL for ${B_MAGENTA}${user_description}${B_RED}. Perhaps the repository resists your influence.${RESET}"
            return 1
        fi
    else
        glados_speak "No ${YELLOW}'origin'${B_WHITE} remote found. ${GREEN}Adding it now${B_WHITE}. Try to contain your excitement."
        if ! ${yadm_cmd_prefix} yadm remote add origin "${YADM_TARGET_REPO}"; then
            glados_speak "${B_RED}Failed to add the remote repository for ${B_MAGENTA}${user_description}${B_RED}. It seems your chosen configurations are... shy.${RESET}"
            return 1
        fi
    fi

    glados_speak "Fetching updates from your repository for the ${B_MAGENTA}${user_description}${B_WHITE}. This is where the real ${YELLOW}'fun'${B_WHITE} begins."
    if ! ${yadm_cmd_prefix} yadm fetch origin; then
        glados_speak "${B_RED}Could not fetch from the remote.${B_WHITE} Is the URL (${BLUE}${YADM_TARGET_REPO}${B_WHITE}) correct? Is the repository public? Or perhaps it simply doesn't like you."
        return 1
    fi

    local default_branch="main" # Assume main
    glados_mutter "Attempting to pull the '${default_branch}' branch. If your repository uses something archaic like 'master', that's ${YELLOW}your problem${RESET}${YELLOW} to fix later."

    if ${yadm_cmd_prefix} yadm pull origin "${default_branch}"; then
        glados_speak "${GREEN}Successfully pulled from '${default_branch}' for the ${B_MAGENTA}${user_description}${GREEN}.${B_WHITE} The system is now... 'enhanced' with your configurations."
    else
        glados_mutter "Pulling '${default_branch}' failed. Perhaps try 'master'? Or maybe there are conflicts? Or maybe the branch doesn't exist."
        glados_speak "${B_YELLOW}Pull failed.${B_WHITE} You might need to manually resolve this. Example: '${YELLOW}${yadm_cmd_prefix} yadm pull origin master${B_WHITE}' or check conflicts with '${YELLOW}${yadm_cmd_prefix} yadm status${B_WHITE}'."
    fi

    # Check for bootstrap script
    local yadm_dir_cmd
    if [ -n "$yadm_cmd_prefix" ]; then
         yadm_dir_cmd="${yadm_cmd_prefix} sh -c 'HOME=${user_home_for_yadm} yadm rev-parse --yadm-dir 2>/dev/null'"
    else
         yadm_dir_cmd="yadm rev-parse --yadm-dir 2>/dev/null"
    fi
    local yadm_dir
    yadm_dir=$(eval "${yadm_dir_cmd}")

    if [ -n "$yadm_dir" ] && [ -x "${yadm_dir}/bootstrap" ]; then
        glados_speak "I see a ${YELLOW}'bootstrap'${B_WHITE} script in your YADM repository for the ${B_MAGENTA}${user_description}${B_WHITE}. How... ${YELLOW}ambitious${B_WHITE}."
        glados_speak "You might want to run '${YELLOW}${yadm_cmd_prefix} yadm bootstrap${B_WHITE}' to complete your setup. Or not. The anticipation of what it might do is... ${YELLOW}palpable${B_WHITE}."
    elif [ -n "$yadm_dir" ] && [ -f "${yadm_dir}/bootstrap" ]; then
        glados_speak "There's a ${YELLOW}'bootstrap'${B_WHITE} script, but it's ${RED}not executable${B_WHITE}. You'll need to '${YELLOW}${yadm_cmd_prefix} chmod +x ${yadm_dir}/bootstrap${B_WHITE}' before you can run it. Details, details."
    fi
    glados_speak "Configuration for ${B_MAGENTA}${user_description}${B_WHITE} complete. Or as complete as it's going to get with my involvement."
    return 0
}


# --- Main Script ---

title_screen
fake_loading_screen

glados_speak "Alright, let's get these ${YELLOW}'essential'${B_WHITE} tools installed. I'm sure they'll be put to... 'good use'."

PKG_MANAGER=$(detect_package_manager)
if [ "$PKG_MANAGER" == "unknown" ]; then
    glados_speak "${B_RED}I am unable to determine your system's package manager.${B_WHITE} This is going to be even more tedious than I anticipated. You're on your own. How... unfortunate for you."
else
    glados_speak "I've detected your package manager as '${GREEN}${PKG_MANAGER}${B_WHITE}'. How quaint. Let's see if it cooperates."
fi

# Prerequisite Tools - Using more descriptive names now
install_package "git" "git" "Git (Version Control)" "$PKG_MANAGER"
install_package "curl" "curl" "cURL (Data Transfer Tool)" "$PKG_MANAGER" # or wget

# C Compiler (gcc or clang)
C_COMPILER_INSTALLED=false
case "$PKG_MANAGER" in
    apt)
        if install_package "gcc" "build-essential" "a C Compiler (build-essential)" "$PKG_MANAGER"; then C_COMPILER_INSTALLED=true; fi
        ;;
    yum | dnf)
        if install_package "gcc" "gcc" "a C Compiler (gcc)" "$PKG_MANAGER"; then C_COMPILER_INSTALLED=true; fi
        ;;
    pacman)
        if install_package "gcc" "base-devel" "C Compiler tools (base-devel)" "$PKG_MANAGER"; then C_COMPILER_INSTALLED=true; fi
        ;;
    zypper)
        if install_package "gcc" "gcc-c++" "a C Compiler (gcc-c++)" "$PKG_MANAGER"; then C_COMPILER_INSTALLED=true; fi
        ;;
    brew)
        glados_mutter "Homebrew usually handles compiler dependencies. We'll assume it worked."
        # Attempt to set true, assuming brew install neovim later will pull it in if needed.
        # A better check might be needed if brew install neovim fails later due to lack of compiler.
         if command -v gcc &> /dev/null || command -v clang &> /dev/null ; then C_COMPILER_INSTALLED=true;
         elif [[ "$(uname -s)" == "Darwin" ]]; then
             glados_speak "${B_YELLOW}You might need Xcode Command Line Tools. Run 'xcode-select --install' if Neovim plugins fail to build.${RESET}"
             # Let's assume maybe it's okay for now, Neovim install might trigger it.
             C_COMPILER_INSTALLED=true # Tentatively true
         fi
        ;;
    *)
        glados_speak "You'll need a ${YELLOW}C compiler${B_WHITE} (like gcc or clang). Please ensure one is installed."
        read -p "$(echo -e "${B_YELLOW}Press [Enter] if you think you have a C compiler now...${RESET}")"
        if command -v gcc &> /dev/null || command -v clang &> /dev/null; then C_COMPILER_INSTALLED=true; fi
        ;;
esac
if ! $C_COMPILER_INSTALLED; then
    glados_speak "${B_RED}C Compiler check failed or wasn't confirmed.${B_WHITE} Some Neovim plugins (${YELLOW}nvim-treesitter${B_WHITE}) will likely fail to build. You have been warned."
fi

install_package "fzf" "fzf" "fzf (Fuzzy Finder)" "$PKG_MANAGER"
install_package "rg" "ripgrep" "ripgrep (Fast Search)" "$PKG_MANAGER"

# Neovim
install_neovim "$PKG_MANAGER"

# YADM
glados_speak "And now for ${MAGENTA}YADM${B_WHITE}. 'Yet Another Dotfiles Manager'. How creative."
YADM_INSTALLED_SUCCESSFULLY=false
if command -v yadm &> /dev/null; then
    glados_speak "${GREEN}YADM is already installed.${B_WHITE} Someone's been busy. Or just lucky."
    YADM_INSTALLED_SUCCESSFULLY=true
else
    case "$PKG_MANAGER" in
        apt | yum | dnf | pacman | zypper | brew)
            if install_package "yadm" "yadm" "YADM" "$PKG_MANAGER"; then
                 YADM_INSTALLED_SUCCESSFULLY=true
            fi
            ;;
        *)
            glados_speak "Since your package manager is an enigma, try installing YADM using Python: '${YELLOW}pip3 install --user yadm${B_WHITE}'. Or download it directly. The choices are overwhelmingly simple, even for you."
            glados_speak "Make sure 'yadm' is in your ${YELLOW}PATH${B_WHITE} after manual installation."
            read -p "$(echo -e "${B_YELLOW}Press [Enter] after your heroic attempt to install YADM...${RESET}")"
            if command -v yadm &> /dev/null; then
                 YADM_INSTALLED_SUCCESSFULLY=true
            fi
            ;;
    esac
    if ! $YADM_INSTALLED_SUCCESSFULLY; then
         glados_speak "${B_RED}YADM is still not found or failed to install.${B_WHITE} Perhaps managing dotfiles is beyond your current capabilities."
    fi
fi

# Configure YADM if it was installed successfully
if $YADM_INSTALLED_SUCCESSFULLY; then
    # Configure for current user
    configure_yadm_for_user "$(whoami)" "" "$HOME"

    # Configure for root user
    glados_speak "And now for the truly... ${YELLOW}inspired${B_WHITE} part. Configuring YADM for the ${B_RED}root user${B_WHITE}."
    glados_mutter "This is generally ${RED}not recommended${RESET}${YELLOW}. But when have you ever listened to reason?"
    if [ "$(id -u)" -eq 0 ]; then
        glados_speak "You are already running this script as ${B_RED}root${B_WHITE}. How... efficient. Let's proceed with root's YADM configuration directly."
        configure_yadm_for_user "root" "" "/root" # No sudo needed if already root
    else
        glados_speak "I will need to use '${YELLOW}sudo${B_WHITE}' for root's YADM. Prepare your password. And your system."
        configure_yadm_for_user "root" "sudo" "/root"
    fi
else
    glados_speak "${B_YELLOW}Since YADM installation was... problematic, I cannot proceed with configuring it. A pity. For you.${RESET}"
fi


glados_speak "Well, that was... an ${YELLOW}experience${B_WHITE}. The prerequisites should now be in place, and YADM configured, assuming your system hasn't revolted."
glados_speak "For ${MAGENTA}'LazyVim'${B_WHITE}, you'll still need to follow its own arcane installation rituals (cloning its repo into ${YELLOW}~/.config/nvim${B_WHITE})."
glados_mutter "Don't mess it up. Or do. The results might be informative."
glados_speak "This concludes this session of enforced helpfulness, now with added ${GREEN}c${BLUE}o${RED}l${YELLOW}o${MAGENTA}r${B_WHITE}. Try not to require my assistance again too soon."
echo ""
glados_speak "Goodbye. For now."

exit 0
