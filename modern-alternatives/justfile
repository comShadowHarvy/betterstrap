# Modern Alternative: Just task runner (replaces complex bash scripts)
# Install: cargo install just
# Usage: just <command>

# Default recipe to display available commands
default:
    @just --list

# Setup development environment
setup-dev:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🔧 Setting up development environment..."
    
    # Install essential packages
    if command -v pacman >/dev/null 2>&1; then
        sudo pacman -S --needed --noconfirm git curl wget python nodejs npm
    elif command -v apt >/dev/null 2>&1; then
        sudo apt update && sudo apt install -y git curl wget python3 nodejs npm
    else
        echo "❌ Unsupported package manager"
        exit 1
    fi
    
    # Install Rust if not present
    if ! command -v rustup >/dev/null 2>&1; then
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source ~/.cargo/env
    fi
    
    echo "✅ Development environment ready!"

# Setup AI tools
setup-ai:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🤖 Setting up AI/ML environment..."
    
    # Install Python AI packages
    pip install --user torch transformers numpy pandas jupyter ollama
    
    # Install Ollama if not present
    if ! command -v ollama >/dev/null 2>&1; then
        curl -fsSL https://ollama.com/install.sh | sh
    fi
    
    echo "✅ AI environment ready!"

# Setup security tools (with warning)
setup-security:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🔒 Setting up security tools..."
    echo "⚠️  These tools are for authorized testing only!"
    read -p "Continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Cancelled."
        exit 1
    fi
    
    # Install security tools based on distribution
    if command -v pacman >/dev/null 2>&1; then
        sudo pacman -S --needed --noconfirm nmap wireshark-qt john hashcat
    elif command -v apt >/dev/null 2>&1; then
        sudo apt update && sudo apt install -y nmap wireshark john hashcat
    fi
    
    echo "✅ Security tools installed!"

# Clean up system
cleanup:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🧹 Cleaning up system..."
    
    if command -v pacman >/dev/null 2>&1; then
        sudo pacman -Scc --noconfirm
        sudo pacman -Rns $(pacman -Qtdq) --noconfirm || true
    elif command -v apt >/dev/null 2>&1; then
        sudo apt autoremove -y
        sudo apt autoclean
    fi
    
    # Clean Docker if installed
    if command -v docker >/dev/null 2>&1; then
        docker system prune -f
    fi
    
    echo "✅ Cleanup complete!"

# Update all systems
update-all:
    #!/usr/bin/env bash
    set -euo pipefail
    echo "🔄 Updating all systems..."
    
    # Update system packages
    if command -v pacman >/dev/null 2>&1; then
        sudo pacman -Syu --noconfirm
    elif command -v apt >/dev/null 2>&1; then
        sudo apt update && sudo apt upgrade -y
    fi
    
    # Update Rust toolchain
    if command -v rustup >/dev/null 2>&1; then
        rustup update
    fi
    
    # Update Python packages
    pip list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1 | xargs -n1 pip install -U
    
    # Update npm packages
    if command -v npm >/dev/null 2>&1; then
        npm update -g
    fi
    
    echo "✅ All systems updated!"

# Create backup of configurations
backup-configs:
    #!/usr/bin/env bash
    backup_dir="$HOME/config-backup-$(date +%Y%m%d-%H%M%S)"
    mkdir -p "$backup_dir"
    
    echo "💾 Backing up configurations to $backup_dir"
    
    # Backup important configs
    cp -r ~/.zshrc ~/.bashrc ~/.gitconfig ~/.ssh/config "$backup_dir/" 2>/dev/null || true
    cp -r ~/.config/nvim "$backup_dir/nvim-config" 2>/dev/null || true
    
    echo "✅ Backup complete: $backup_dir"
